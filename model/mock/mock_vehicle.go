// Code generated by MockGen. DO NOT EDIT.
// Source: ../model/vehicle.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "github.com/fleetState/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockState is a mock of State interface
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockState) All() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]string)
	return ret0
}

// All indicates an expected call of All
func (mr *MockStateMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockState)(nil).All))
}

// One mocks base method
func (m *MockState) One(id string) (model.VehicleDef, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", id)
	ret0, _ := ret[0].(model.VehicleDef)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// One indicates an expected call of One
func (mr *MockStateMockRecorder) One(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockState)(nil).One), id)
}

// Update mocks base method
func (m *MockState) Update(v model.VehicleDef) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", v)
}

// Update indicates an expected call of Update
func (mr *MockStateMockRecorder) Update(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockState)(nil).Update), v)
}
