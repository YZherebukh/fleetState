// Code generated by MockGen. DO NOT EDIT.
// Source: ../vehicle/vehicle.go

// Package mock_vehicle is a generated GoMock package.
package mock_vehicle

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockMiddleware is a mock of Middleware interface
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// SetContextHeader mocks base method
func (m *MockMiddleware) SetContextHeader(next http.HandlerFunc) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContextHeader", next)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// SetContextHeader indicates an expected call of SetContextHeader
func (mr *MockMiddlewareMockRecorder) SetContextHeader(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContextHeader", reflect.TypeOf((*MockMiddleware)(nil).SetContextHeader), next)
}

// SetContextHeaderWithTimeout mocks base method
func (m *MockMiddleware) SetContextHeaderWithTimeout(next http.HandlerFunc) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContextHeaderWithTimeout", next)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// SetContextHeaderWithTimeout indicates an expected call of SetContextHeaderWithTimeout
func (mr *MockMiddlewareMockRecorder) SetContextHeaderWithTimeout(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContextHeaderWithTimeout", reflect.TypeOf((*MockMiddleware)(nil).SetContextHeaderWithTimeout), next)
}
